:mod:`ga4gh.refget.serverless.middleware.media_type`
====================================================

.. py:module:: ga4gh.refget.serverless.middleware.media_type

.. autoapi-nested-parse::

   Checks request headers for correct/appropriate media types



Module Contents
---------------

.. py:class:: MediaTypeMW

   Bases: :class:`object`

   Middleware, checks request for appropriate media types

   MediaTypeMW middleware checks the "Accept" header of the request. If the
   request only accepts MIME types that the refget app cannot satisfy, it sets
   the response status code to NOT ACCEPTABLE

   .. method:: middleware_func(event, resp, supported_media_types)
      :staticmethod:


      performs all media type validation submethods

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`
      :param supported_media_types: MIME types supported by server route
      :type supported_media_types: list[str]


   .. method:: __assign_default_media_type(event)
      :staticmethod:


      set default media types if no request "Accept" header

      If the request doesn't contain an "Accept" header, then assume the
      client will accept refget's MIME types

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]


   .. method:: __check_unsupported_media_type(resp, client_types, supported_types)
      :staticmethod:


      Check if server can fulfill request accepted media types

      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`
      :param client_types: accepted MIME types from client 'Accept' header
      :type client_types: list[str]
      :param supported_types: MIME types this API route allows
      :type supported_types: list[str]



.. function:: MediaTypeMidware(event, context, supported_media_types=[DEFAULT_CONTENT_TYPE_JSON])

   Creates the media type middleware decorator function

   :param event: AWS SAM event (incl. headers, path params, query params)
   :type event: dict[str, object]
   :param context: AWS SAM context
   :type context: dict[str, str]
   :param supported_media_types: supported MIME types for this api route
   :type supported_media_types: list[str]
   :return: media type middleware decorator function
   :rtype: function


