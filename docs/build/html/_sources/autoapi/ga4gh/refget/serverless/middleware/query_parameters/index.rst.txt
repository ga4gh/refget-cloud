:mod:`ga4gh.refget.serverless.middleware.query_parameters`
==========================================================

.. py:module:: ga4gh.refget.serverless.middleware.query_parameters

.. autoapi-nested-parse::

   Checks that query string parameters and/or headers are set correctly



Module Contents
---------------

.. py:class:: QueryParametersMW

   Bases: :class:`object`

   Middleware, checks request for appropriate query parameters

   QueryParametersMW checks "start" and/or "end" query parameters, or the
   "Range" header, which all deal with requesting subsequences. If any of
   these request parameters/headers are malformed, it sets the response status
   code to an appropriate error code

   .. method:: middleware_func(event, resp)
      :staticmethod:


      performs all subsequence param validation submethods

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`


   .. method:: __check_supplied_params(event, resp)
      :staticmethod:


      check if subsequence parameters are supplied and specified correctly

      Updates the response data dictionary with start/end positions, and the
      subseq-type. ONLY ONE of start/end query params and Range header can
      be supplied. If BOTH subseq methods are provided, response is modified
      to indicate this is a BAD REQUEST

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`


   .. method:: __get_subseq_coords(event, resp)
      :staticmethod:


      parse start/end bases according to subsequence specification format

      Sets 'start' and 'end' bases in data dictionary, based on how the
      subsequence was provided ('range' or 'start-end'). If the Range header
      does not follow the expected format, this is a BAD REQUEST

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`


   .. method:: __check_datatype(event, resp)
      :staticmethod:


      checks the start/end parameters are valid positive integers

      If either start or end base provided by request are not integers, this
      is a BAD REQUEST

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`


   .. method:: __check_datarange(event, resp)
      :staticmethod:


      check that start/end bases fall within accepted range

      start/end accepted range is slightly different based on whether subseq
      was request by query parameters or Range header. If the requested subseq
      violates constraints then the response status code will be set to
      REQUESTED RANGE NOT SATIFIABLE

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`


   .. method:: __check_noncircular(event, resp)
      :staticmethod:


      check requested subsequence is not circular

      circular sequence requests are not currently supported on this server.
      if the start base is higher than the end base, this will give the
      response an error status code (exact code based on subeq specification
      type)

      :param event: AWS SAM event (incl. headers, path params, query params)
      :type event: dict[str, object]
      :param resp: response object to modify
      :type resp: class:`ga4gh.refget.serverless.cls.http.response.Response`



.. function:: QueryParametersMidware(event, context)

   Creates the query parameter middleware decorator function

   :param event: AWS SAM event (incl. headers, path params, query params)
   :type event: dict[str, object]
   :param context: AWS SAM context
   :type context: dict[str, str]
   :return: query parameters middleware decorator function
   :rtype: function


