:mod:`ga4gh.refget.serverless.cls.http.response`
================================================

.. py:module:: ga4gh.refget.serverless.cls.http.response

.. autoapi-nested-parse::

   Defines the Response class, which can be modified to modulate the http
   response sent back to the client. Response is formatted according to expected
   AWS SAM format.



Module Contents
---------------

.. py:class:: Response

   Bases: :class:`object`

   an HTTP response, sends back appropriate response to client

   For each web api route, a Response object is created and modified through
   a chain of middleware checks. If, at the end of a middleware function, the
   response status code is OK (200), the next function will execute. If ever
   the status code is modified to an error, the response will be sent back to
   client without executing further processing steps.

   :param status_code: response status code
   :type status_code: int
   :param headers: http headers
   :type headers: dict[str, str]
   :param body: response body
   :type body: str
   :param data: data dict accessible throughout all middleware functions
   :type data: dict[str, str]

   .. method:: finalize(self)


      Format response according to AWS lambda/API Gateway expected format

      For each API route declared in an AWS SAM stack, the response must be
      sent back as a dict with the appropriate keys and data structures. This
      method formats the response object according to that format.

      :return: response information formatted according to AWS SAM
      :rtype: dict[str, object]


   .. method:: set_body(self, body)


      set response body

      :param body: string to set to response body
      :type body: str


   .. method:: get_body(self)


      get response body

      :return: response body
      :rtype: str


   .. method:: set_status_code(self, status_code)


      set status code

      :param status_code: int to set to status code
      :type status_code: int


   .. method:: get_status_code(self)


      get status code

      :return: response status code
      :rtype: int


   .. method:: put_header(self, key, value)


      add or update a key-value pair to response headers

      :param key: header key/name
      :type key: str
      :param value: value for this header
      :type value: str


   .. method:: update_headers(self, new_dict)


      add or update multiple header keys and values

      This method accepts a dictionary of new headers, and will update the
      existing header dictionary with the new keys and values.

      :param new_dict: dictionary to update headers with
      :type new_dict: dict[str, str]


   .. method:: get_header(self, key)


      get the value of a particular header

      :param key: header key/name
      :type key: str
      :return: value of specified header
      :rtype: str


   .. method:: get_headers(self)


      get complete header dictionary

      :return: header dictionary
      :rtype: dict[str, str]


   .. method:: put_data(self, key, value)


      add or update a key-value pair to data dictionary

      :param key: data key/name
      :type key: str
      :param value: value to store under key
      :type value: str


   .. method:: update_data(self, new_dict)


      add or update multiple keys and values to data dictionary

      This method accepts a dictionary of new data, and will update the
      existing data dictionary with the new keys and values.

      :param new_dict: dictionary to update data dictionary with
      :type new_dict: dict[str, str]


   .. method:: get_datum(self, key)


      get the value under the specified key in data dictionary

      :param key: data key/name
      :type key: str
      :return: value under specified key in data dictionary
      :rtype: str


   .. method:: get_data(self)


      get complete data dictionary

      :return: data dictionary
      :rtype: dict[str, str]


   .. method:: set_redirect_found(self, url)


      set the response to redirect client to specified url

      :param url: redirect url
      :type url: str



